on:
  push:
    branches: [ master ]name: Deploy to Amazon ECSjobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest    steps:
    - name: Checkout
      uses: actions/checkout@v2    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stashit
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd services/web_server
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Modify Amazon ECS task definition with celery-worker container
      id: image-replace
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: deploy/ecs.staging.json
        container-name: stashit
        image: ${{ steps.build-image.outputs.image }}    - name: Deploy stashit Stack to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.image-replace.outputs.task-definition }}
        service: stashit-staging
        cluster: staging